/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Transaction;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-05T11:29:14.407Z[GMT]")
@Api(value = "transactions", description = "the transactions API")
public interface TransactionsApi {

    @ApiOperation(value = "Handle a new transaction", nickname = "createTransaction", notes = "", tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful transaction"),
        @ApiResponse(code = 405, message = "Invalid input") })
    @RequestMapping(value = "/transactions",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createTransaction(@ApiParam(value = "Transaction object that needs to be added to the store" ,required=true )  @Valid @RequestBody Transaction body
);


    @ApiOperation(value = "Get a list of transactions", nickname = "getTransaction", notes = "", response = Transaction.class, responseContainer = "List", tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Transaction.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransaction(@NotNull @ApiParam(value = "Pass in the ID of the account of which to get the transactions from", required = true) @Valid @RequestParam(value = "accountId", required = true) String accountId
,@ApiParam(value = "The number of items to skip before starting to collect the result set") @Valid @RequestParam(value = "offset", required = false) Integer offset
,@Min(1) @Max(100) @ApiParam(value = "The max number of results to return", allowableValues = "") @Valid @RequestParam(value = "count", required = false) Integer count
);


    @ApiOperation(value = "Find transaction by ID", nickname = "getTransactionById", notes = "Returns a single transaction with corresponding ID", response = Transaction.class, tags={ "transaction", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Transaction.class),
        @ApiResponse(code = 400, message = "Invalid transactionId supplied"),
        @ApiResponse(code = 404, message = "Transaction not found") })
    @RequestMapping(value = "/transactions/{transactionId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Transaction> getTransactionById(@ApiParam(value = "Id of transaction to return",required=true) @PathVariable("transactionId") Long transactionId
);

}
