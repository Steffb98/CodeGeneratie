/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.19).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.Balance;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-05-05T11:29:14.407Z[GMT]")
@Api(value = "account", description = "the account API")
public interface AccountApi {

    @ApiOperation(value = "Deletes an account", nickname = "deleteAccount", notes = "", response = Account.class, responseContainer = "List", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "an account", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "failed to authenticate") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<List<Account>> deleteAccount(@ApiParam(value = "account ID",required=true) @PathVariable("accountId") Integer accountId
);


    @ApiOperation(value = "Get the account details", nickname = "getAccount", notes = "By passing in the appropriate AccountID, you get the account details", response = Account.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "account details gotten", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/account/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAccount(@ApiParam(value = "Pass in the ID of the account",required=true) @PathVariable("accountId") String accountId
);


    @ApiOperation(value = "Get all the accounts belonging to one user", nickname = "getAccountsWithUserId", notes = "By passing in the appropriate userId, you get all accounts belonging to that user", response = Account.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "accounts gotten", response = Account.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/account/{userId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getAccountsWithUserId(@ApiParam(value = "Pass in the ID of the user",required=true) @PathVariable("userId") String userId
);


    @ApiOperation(value = "Get the ammount of balance on your account", nickname = "getBalance", notes = "By passing in the appropriate balance, you can check how much balance you have", response = Balance.class, responseContainer = "List", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Balance gotten from account", response = Balance.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/account/balance/{accountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Balance>> getBalance(@ApiParam(value = "Pass in the ID of the back account",required=true) @PathVariable("accountId") String accountId
);


    @ApiOperation(value = "Adds a new Account", nickname = "registerAccount", notes = "", tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "executed"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/account/register",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> registerAccount(@ApiParam(value = ""  )  @Valid @RequestBody Account body
);


    @ApiOperation(value = "Updated existing account", nickname = "updateAcount", notes = "By filling in this form, you update an account", authorizations = {
        @Authorization(value = "ApiKeyAuth")    }, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid account supplied"),
        @ApiResponse(code = 404, message = "account not found") })
    @RequestMapping(value = "/account/{accountId}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAcount(@ApiParam(value = "Updated account object" ,required=true )  @Valid @RequestBody Account body
,@ApiParam(value = "id of account that needs to be updated",required=true) @PathVariable("accountId") String accountId
);

}
